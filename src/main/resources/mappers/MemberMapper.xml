<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.onestack.project.mapper.MemberMapper">

	<resultMap id="memberMap" type="Member">
		<id property="memberNo" column="member_no"/>
		<result property="name" column="name"/>
		<result property="memberId" column="member_id"/>
		<result property="pass" column="pass"/>
		<result property="nickname" column="nickname"/>
		<result property="birth" column="birth"/>
		<result property="gender" column="gender"/>
		<result property="zipcode" column="zipcode"/>
		<result property="address" column="address"/>
		<result property="address2" column="address2"/>
		<result property="email" column="email"/>
		<result property="emailGet" column="email_get"/>
		<result property="phone" column="phone"/>
		<result property="memberRegDate" column="member_reg_date"/>
		<result property="memberType" column="member_type"/>
		<result property="memberImage" column="member_image"/>
		<result property="stack" column="stack"/>
		<result property="stackName" column="stack_name"/>
		<result property="withdrawalEndDate" column="withdrawal_end_date"/>
		<result property="banEndDate" column="ban_end_date"/>
		<result property="reportedCount" column="reported_count"/>
		<result property="isSocial" column="is_social"/>
		<result property="socialType" column="social_type"/>
	</resultMap>

	<resultMap id="professionalMap" type="Professional">
		<id property="proNo" column="pro_no"/>
		<result property="memberNo" column="member_no"/>
		<result property="itemNo" column="item_no"/>
		<result property="selfIntroduction" column="self_introduction"/>
		<result property="career" column="career"/>
		<result property="awardCareer" column="award_career"/>
		<result property="studentCount" column="student_count"/>
		<result property="rate" column="rate"/>
		<result property="professorStatus" column="professor_status"/>
		<result property="screeningMsg" column="screening_msg"/>
		<result property="proDate" column="pro_date"/>
		<result property="contactableTime" column="contactable_time"/>
		<result property="averagePrice" column="average_price"/>
		<result property="reviewCount" column="review_count"/>
	</resultMap>

	<resultMap id="communityMap" type="Community">
		<id property="communityBoardNo" column="community_board_no"/>
		<result property="communityBoardTitle" column="community_board_title"/>
		<result property="communityBoardContent" column="community_board_content"/>
		<result property="communityBoardRegDate" column="community_board_reg_date"/>
		<result property="communityView" column="community_view"/>
		<result property="communityBoardLike" column="community_board_like"/>
	</resultMap>


	<resultMap id="communityReplyMap" type="CommunityReply">
		<id property="communityReplyNo" column="community_reply_no"/>
		<result property="communityReplyContent" column="community_reply_content"/>
		<result property="communityReplyRegDate" column="community_reply_reg_date"/>
		<result property="communityReplyLike" column="community_reply_like"/>
		<result property="communityReplyDislike" column="community_reply_dislike"/>
		<result property="communityReplyActivation" column="community_reply_activation"/>
	</resultMap>



	<resultMap id="portfolioMap" type="Portfolio">
		<id property="portfolioNo" column="portfolio_no"/>
		<result property="proNo" column="pro_no"/>
		<result property="proAdvancedNo" column="pro_advanced_no"/>
		<result property="portfolioTitle" column="portfolio_title"/>
		<result property="portfolioContent" column="portfolio_content"/>
		<result property="visibility" column="visibility"/>
	</resultMap>

	<resultMap id="portfolioImagesMap" type="PortfolioImage">
		<id property="portfolioNo" column="portfolio_no"/>
		<result property="thumbnailImage" column="thumbnail_image"/>
		<result property="portfolioFile1" column="portfolio_file1"/>
		<result property="portfolioFile2" column="portfolio_file2"/>
		<result property="portfolioFile3" column="portfolio_file3"/>
		<result property="portfolioFile4" column="portfolio_file4"/>
		<result property="portfolioFile5" column="portfolio_file5"/>
		<result property="portfolioFile6" column="portfolio_file6"/>
		<result property="portfolioFile7" column="portfolio_file7"/>
		<result property="portfolioFile8" column="portfolio_file8"/>
		<result property="portfolioFile9" column="portfolio_file9"/>
		<result property="portfolioFile10" column="portfolio_file10"/>
	</resultMap>

	<resultMap id="review" type="com.onestack.project.domain.Review">
		<id property="reviewNo" column="review_no"/>
		<result property="proNo" column="pro_no"/>
		<result property="memberNo" column="member_no"/>
		<result property="reviewContent" column="review_content"/>
		<result property="reviewRate" column="review_rate"/>
		<result property="reviewDate" column="review_date"/>
		<result property="reviewActivation" column="review_activation"/>
	</resultMap>

	<resultMap id="Estimation" type="com.onestack.project.domain.Estimation">
		<id property="estimationNo" column="estimation_no" />
		<result property="memberNo" column="member_no" />
		<result property="proNo" column="pro_no" />
		<result property="itemNo" column="item_no" />
		<result property="estimationContent" column="estimation_content" />
		<result property="estimationPrice" column="estimation_price" />
		<result property="estimationMsg" column="estimation_msg" />
		<result property="estimationIsRead" column="estimation_isread" />
	</resultMap>

	<resultMap id="memProWithPortPortImage" type="MemProWithPortPortImage">
		<association property="portfolioWithportfolioImage" javaType="PortfolioWithportfolioImage" resultMap="portfolioWithportfolioImage" />
		<association property="memberWithProfessional" javaType="MemberWithProfessional" resultMap="memberWithProfessional" />
	</resultMap>


	<resultMap id="memberWithProfessional" type="MemberWithProfessional">
		<association property="member" javaType="Member" resultMap="memberMap"/>
		<association property="professional" javaType="Professional" resultMap="professionalMap"/>
	</resultMap>

	<!-- ResultMap 정의 추가 -->
	<resultMap id="memberWithCommunityMap" type="MemberWithCommunity">
		<association property="member" javaType="Member" resultMap="memberMap"/>
		<association property="community" javaType="Community" resultMap="communityMap"/>
	</resultMap>



	<!-- community With CommunityReply -->
	<resultMap id="ComWithComReply" type="ComWithComReply">
		<association property="community" javaType="Community" resultMap="communityMap"/>
		<association property="communityReply" javaType="CommunityReply" resultMap="communityReplyMap" />
	</resultMap>


	<resultMap id="memberEstimation" type="MemberEstimation">
		<association property="member" javaType="Member" resultMap="memberMap"/>
		<association property="estimation" javaType="Estimation" resultMap="Estimation" />
	</resultMap>

	<resultMap id="proEstimation" type="ProEstimation">
		<association property="professional" javaType="Professional" resultMap="professionalMap"/>
		<association property="estimation" javaType="Estimation" resultMap="Estimation" />
	</resultMap>

	<!-- 회원 정보 수정 시, 기존 비밀번호 체크-->
	<select id="checkCurrentPassword" resultType="int">
		SELECT COUNT(*)
		FROM Member
		WHERE member_no = #{memberNo}
		  AND pass = #{currentPassword}
	</select>

	<!-- 소셜 로그인 회원 선택적 업데이트 쿼리 -->
	<update id="updateMemberSelective" parameterType="Member">
		UPDATE Member
		<set>
			<if test="phone != null">phone = #{phone},</if>
			<if test="zipcode != null">zipcode = #{zipcode},</if>
			<if test="address != null">address = #{address},</if>
			<if test="address2 != null">address2 = #{address2}</if>
		</set>
		WHERE member_id = #{memberId}
	</update>

	<!-- 회원이 요청한 견적 리스트 Estimation-->
	<select id="memberEstimation" parameterType="int" resultType="Estimation">
		SELECT e.*, 
			   m.nickname as memberNickname, 
			   p.nickname as proNickname,
			   c.item_title as categoryName
		FROM Estimation e
		JOIN Member m ON e.member_no = m.member_no
		JOIN Member p ON e.pro_no = p.member_no
		JOIN Category c ON e.item_no = c.item_no
		WHERE e.member_no = #{memberNo}
		ORDER BY e.estimation_no DESC
	</select>

	<!-- 전문가가 받은 견적 요청 리스트 조회 (대기 상태만) -->
	<select id="proEstimation" resultType="Estimation">
		SELECT e.*, m.name as memberName, m.nickname as memberNickname
		FROM Estimation e
		JOIN Member m ON e.member_no = m.member_no
		WHERE e.pro_no = #{proNo}
		AND e.progress = 0  <!-- 대기 상태인 것만 -->
		ORDER BY e.estimation_no DESC
	</select>

	<select id="portfolio" parameterType="Portfolio">
		SELECT *
		FROM Portfolio
		WHERE pro_no = #{proNo}
	</select>



	<!-- 내역 조회를 위한 memberWithProfessional -->
	<select id="memberWithProfessional" parameterType="int" resultMap="memberWithProfessional">
		SELECT m.*, p.*
		FROM Member m
				 JOIN Professional p ON m.member_no = p.member_no
		WHERE m.member_no = #{memberNo}
	</select>

	<!-- 회원별 작성한 리뷰 조회 -->
	<select id="findMyReview" parameterType="int" resultType="Review">
		SELECT *
		FROM Review
		WHERE member_no = #{memberNo}
	</select>

	<!-- 자신이 작성한 리뷰 수 조회 -->
	<select id="findMyReviewCount" parameterType="int" resultType="int">
		SELECT COUNT(review_no)
		FROM Review
		WHERE member_no = #{memberNo}
	</select>


	<!-- 회원별 작성한 게시글 조회 -->
	<select id="memberMyPageCommunity" parameterType="int" resultMap="memberWithCommunityMap">
		SELECT
			m.*, c.*
		FROM Member m
				 JOIN Community c ON m.member_no = c.member_no
		WHERE m.member_no = #{memberNo}
		ORDER BY c.community_board_reg_date DESC
	</select>

	<!-- 회원별 작성한 게시글 수 조회 -->
	<select id="memberMyPageCommunityCount" parameterType="int" resultType="int">
		SELECT COUNT(c.community_board_no)
		FROM Member m
				 JOIN Community c ON m.member_no = c.member_no
		WHERE m.member_no = #{memberNo}
	</select>

	<!-- 회원별 작성한 댓글 조회 -->
	<select id="comWithComReply" parameterType="int" resultMap="ComWithComReply">
		SELECT
			c.*, cr.*
		FROM Community c
				 LEFT JOIN CommunityReply cr ON c.community_board_no = cr.community_board_no
		WHERE c.member_no = #{memberNo}
		ORDER BY c.community_board_reg_date DESC
	</select>

	<!-- 회원별 작성한 댓글 수 조회 -->
	<select id="memberMyPageComReplyCount" parameterType="int" resultType="int">
		SELECT COUNT(c.community_reply_no)
		FROM CommunityReply c
				 JOIN Member m ON c.member_no = m.member_no
		WHERE m.member_no = #{memberNo}
	</select>

	<!-- 게시글 공감 조회 -->
	<select id="memberMyPageCommunityLike" resultType="Community">
		SELECT *
		FROM Community
		WHERE member_no = #{memberNo}
		  AND community_board_like > 0
	</select>

	<!-- 댓글 공감 조회 -->
	<select id="memberMyPageComReplyLike" resultType="CommunityReply">
		SELECT cr.*, c.community_board_title
		FROM CommunityReply cr
				 JOIN Community c ON cr.community_board_no = c.community_board_no
		WHERE cr.member_no = #{memberNo}
		  AND cr.community_reply_like > 0
	</select>

	<!-- 회원 수정 -->
	<update id="updateMember" parameterType="Member" >
		UPDATE Member
		SET
		name = #{name},
		nickname = #{nickname},
		member_id = #{memberId},
		email = #{email},
		phone = #{phone},
		email_get = #{emailGet},
		zipcode = #{zipcode},
		address = #{address},
		address2 = #{address2}
		<if test="memberImage != null and memberImage != ''">
			, member_image = #{memberImage}
		</if>
		WHERE member_no = #{memberNo}
	</update>

	<!-- 소셜 로그인 회원 수정 -->
	<update id="updateSocialMember" parameterType="Member">
		UPDATE Member
		SET
			nickname = #{nickname},
			email = #{email},
			phone = #{phone},
			email_get = #{emailGet},
			zipcode = #{zipcode},
			address = #{address},
			address2 = #{address2}
		<if test="memberImage != null and memberImage != ''">
			, member_image = #{memberImage}
		</if>
		WHERE member_no = #{memberNo}
	</update>

	<!-- 회원 조회 -->
	<select id="getMember" parameterType="String" resultType="Member">
		SELECT *
		FROM Member
		WHERE member_id = #{memberId}
	</select>

	<!-- 회원 가입 -->
	<insert id="insertMember" parameterType="Member" useGeneratedKeys="true" keyProperty="memberNo">
		INSERT INTO Member (name, member_id, pass, nickname, birth, gender, zipcode, address, address2, email, email_get, phone, member_reg_date, member_image)
		VALUES (#{name}, #{memberId}, #{pass}, #{nickname}, #{birth}, #{gender}, #{zipcode}, #{address}, #{address2}, #{email}, #{emailGet}, #{phone}, NOW(), #{memberImage})
	</insert>

	<!-- ID 중복 체크 -->
	<select id="checkMemberId">
		SELECT COUNT(*)
		FROM Member
		WHERE member_id = #{memberId}
	</select>

	<!-- 닉네임 중복 체크 -->
	<select id="checkNickname" parameterType="String" resultType="int">
		SELECT COUNT(*)
		FROM Member
		WHERE nickname = #{nickname}
	</select>

	<!-- 이메일 중복 체크 -->
	<select id="checkEmail" parameterType="String" resultType="int">
		SELECT COUNT(*)
		FROM Member
		WHERE email = #{email}
	</select>

	<!-- 전화번호 중복 체크 -->
	<select id="checkPhone" parameterType="String" resultType="int">
		SELECT COUNT(*)
		FROM Member
		WHERE phone = #{phone}
	</select>

	<select id="findMemberId" parameterType="Member" resultType="String">
		SELECT member_id
		FROM Member
		WHERE name = #{name}
		  AND phone = #{phone}
		  AND (social_type IS NULL OR social_type = 'none')
	</select>

	<select id="findSocialMemberId" parameterType="Member" resultType="String">
		SELECT social_type
		FROM Member
		WHERE name = #{name}
		  AND phone = #{phone}
		  AND social_type IN ('google', 'kakao')
	</select>

	<!-- 회원 탈퇴 -->
	<update id="withdrawalMember" parameterType="int">
		UPDATE Member
		SET member_type = 2,
			withdrawal_end_date = DATE_ADD(NOW(), INTERVAL 30 DAY)
		WHERE member_no = #{memberNo}
	</update>

	<!-- 탈퇴 만료 회원 삭제 처리 -->
	<delete id="withdrawalExpiredMember">
		DELETE FROM Member
		WHERE member_type = 2
		  AND withdrawal_end_date &lt; NOW()
	</delete>

	<!-- 회원 삭제 -->
	<delete id="deleteMember" parameterType="int">
		DELETE FROM Member
		WHERE member_no = #{memberNo}
	</delete>

	<!-- 비밀번호 확인 -->
	<select id="memberPassCheck" parameterType="String" resultType="String">
		SELECT pass
		FROM Member
		WHERE member_id = #{memberId}
	</select>

	<!-- 결제 내역 조회 -->
	<select id="getMemberPayments" resultType="map">
		SELECT p.*, m.name as member_name
		FROM Payment p
				 JOIN Member m ON p.member_no = m.member_no
		WHERE p.member_no = #{memberNo}
		ORDER BY p.payment_date DESC
	</select>

	<!-- 삭제 쿼리들 -->
	<update id="deleteReview">
		UPDATE Review
		SET review_activation = 0
		WHERE review_no = #{reviewId}
	</update>

	<delete id="deletePayment">
		DELETE FROM Payment
		WHERE payment_no = #{paymentId}
	</delete>

	<!-- LHB - 회원ID로 회원번호 조회 -->
	<select id="findMemberNoByMemberId" parameterType="string" resultType="int">
		SELECT member_no
		FROM Member
		WHERE member_id = #{memberId}
	</select>

	<!-- 비밀번호 재설정 토큰 저장 -->
	<insert id="savePasswordResetToken" parameterType="PasswordResetToken">
		INSERT INTO PasswordResetToken (member_id, token, expiry_date)
		VALUES (#{memberId}, #{token}, #{expiryDate})
	</insert>

	<!-- 토큰으로 비밀번호 재설정 정보 조회 -->
	<select id="findByToken" parameterType="String" resultType="PasswordResetToken">
		SELECT * FROM PasswordResetToken
		WHERE token = #{token}
	</select>

	<!-- 비밀번호 업데이트 -->
	<update id="updatePassword">
		UPDATE Member
		SET pass = #{newPassword}
		WHERE member_id = #{memberId}
	</update>

	<!-- 사용된 토큰 삭제 -->
	<delete id="deletePasswordResetToken" parameterType="String">
		DELETE FROM PasswordResetToken
		WHERE token = #{token}
	</delete>

	<update id="updateEstimationProgress">
		UPDATE Estimation 
		SET progress = #{progress},
			updated_at = CURRENT_TIMESTAMP
		WHERE estimation_no = #{estimationNo}
	</update>

	<!-- 전체 견적 수 조회 -->
	<select id="getEstimationCount" resultType="int">
		SELECT COUNT(*)
		FROM Estimation e
		WHERE e.pro_no = #{proNo}
		AND e.progress = 0
	</select>

	<!-- 페이지별 견적 목록 조회 -->
	<select id="getEstimationsByPage" resultType="Estimation">
		SELECT 
			e.*, 
			m.name as memberName, 
			m.nickname as memberNickname,
			c.item_title as categoryName
		FROM 
			Estimation e
			JOIN Member m ON e.member_no = m.member_no
			JOIN Category c ON e.item_no = c.item_no
		WHERE 
			e.pro_no = #{proNo}
			AND e.progress = 0
		ORDER BY 
			e.estimation_no DESC
		LIMIT #{offset}, #{pageSize}
	</select>

	<!-- 회원 번호로 회원 정보 조회 -->
	<select id="getMemberByNo" resultType="Member">
		SELECT *
		FROM Member
		WHERE member_no = #{memberNo}
	</select>

	<!-- 견적 번호로 견적 정보 조회 -->
	<select id="getEstimationByNo" resultType="Estimation">
		SELECT 
			e.*,
			m.nickname as memberNickname,
			p.nickname as proNickname,
			c.item_title as categoryName
		FROM 
			Estimation e
			LEFT JOIN Member m ON e.member_no = m.member_no
			LEFT JOIN Professional pr ON e.pro_no = pr.member_no
			LEFT JOIN Member p ON pr.member_no = p.member_no
			LEFT JOIN Category c ON e.item_no = c.item_no
		WHERE 
			e.estimation_no = #{estimationNo}
	</select>

	<!-- 견적 확인 상태 업데이트 -->
	<update id="updateEstimationCheck">
		UPDATE Estimation 
		SET 
			estimation_check = #{estimationCheck},
			updated_at = CURRENT_TIMESTAMP
		WHERE estimation_no = #{estimationNo}
	</update>

	<update id="updateEstimationPrice">
		UPDATE Estimation
		SET
			estimation_price = #{estimationPrice},
			updated_at = CURRENT_TIMESTAMP
		WHERE estimation_no = #{estimationNo}
	</update>

	<!-- 전문가 수 확인 -->
	<select id="getProCount">
		SELECT COUNT(*)
		FROM Member
		WHERE member_type = 1
	</select>

	<!-- 회원 수 확인 -->
	<select id="getMemberCount">
		SELECT COUNT(*)
		FROM Member
		WHERE member_type = 0
	</select>

	<!-- 완료된 외주 수 확인 -->
	<select id="getMainEstimationCount">
		SELECT COUNT(*)
		FROM Estimation
		WHERE progress = 4
	</select>

	<!-- 전문가 번호 조회 -->
	<select id="getProNo" parameterType="int" resultType="int">
		SELECT pro_no
		FROM Professional
		WHERE member_no = #{memberNo}
	</select>
	
</mapper>