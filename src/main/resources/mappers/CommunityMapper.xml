<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.onestack.project.mapper.CommunityMapper">
	<resultMap id="CommunityResultMap" type="com.onestack.project.domain.Community">
		<id property="communityBoardNo" column="community_board_no" />
		<result property="memberNo" column="member_no" />
		<result property="communityBoardTitle" column="community_board_title" />
		<result property="communityBoardContent" column="community_board_content" />
		<result property="communityBoardRegDate" column="community_board_reg_date" />
		<result property="communityView" column="community_view" />
		<result property="communityFile" column="community_file" />
		<result property="communityBoardLike" column="community_board_like" />
		<result property="communityBoardDislike" column="community_board_dislike" />
		<result property="communityBoardActivation" column="community_board_activation" />
		<result property="communityReplyCount" column="community_reply_count" />
	</resultMap>

	<resultMap id="CommunityReplyResultMap" type="com.onestack.project.domain.CommunityReply">
		<id property="communityReplyNo" column="community_reply_no" />
		<result property="communityBoardNo" column="community_board_no" />
		<result property="memberNo" column="member_no" />
		<result property="communityReplyContent" column="community_reply_content" />
		<result property="communityReplyRegDate" column="community_reply_reg_date" />
		<result property="communityReplyLike" column="community_reply_like" />
		<result property="communityReplyDislike" column="community_reply_dislike" />
		<result property="communityReplyActivation" column="community_reply_activation" />
	</resultMap>

	<resultMap id="MemberResultMap" type="com.onestack.project.domain.Member">
		<id property="memberNo" column="member_no" />
		<result property="name" column="name" />
		<result property="memberId" column="member_id" />
		<result property="kakaoId" column="kakao_id" />
		<result property="pass" column="pass" />
		<result property="nickname" column="nickname" />
		<result property="birth" column="birth" />
		<result property="gender" column="gender" />
		<result property="zipcode" column="zipcode" />
		<result property="address" column="address" />
		<result property="address2" column="address2" />
		<result property="email" column="email" />
		<result property="emailGet" column="email_get" />
		<result property="phone" column="phone" />
		<result property="memberRegDate" column="member_reg_date" />
		<result property="memberType" column="member_type" />
		<result property="memberStatus" column="member_status" />
		<result property="memberImage" column="member_image" />
		<result property="stack" column="stack" />
		<result property="stackName" column="stack_name" />
		<result property="withdrawalEndDate" column="withdrawal_end_date" />
		<result property="banEndDate" column="ban_end_date" />
		<result property="reportedCount" column="reported_count" />
		<result property="isAdmin" column="is_admin" />
		<result property="isSocial" column="is_social" />
		<result property="socialType" column="social_type" />
	</resultMap>

	<resultMap id="MemberWithCommunityResultMap" type="com.onestack.project.domain.MemberWithCommunity">
		<association property="member" resultMap="MemberResultMap" />
		<association property="community" resultMap="CommunityResultMap" />
	</resultMap>

	<resultMap id="MemberWithCommunityReplyResultMap" type="com.onestack.project.domain.MemberWithCommunityReply">
		<association property="member" resultMap="MemberResultMap" />
		<association property="communityReply" resultMap="CommunityReplyResultMap" />
	</resultMap>

<!--
	<select id="getRepliesByBoardNo" resultType="MemberWithCommunityReplyResultMap">
		SELECT r.*, m.*
		FROM CommunityReply r
				 JOIN Member m ON r.member_no = m.member_no
		WHERE r.community_board_no = #{communityBoardNo}
	</select>
-->

	<insert id="insertCommunityReply" parameterType="CommunityReply">
		INSERT INTO CommunityReply (community_board_no, member_no, community_reply_content, community_reply_reg_date)
		VALUES (#{communityBoardNo}, #{memberNo}, #{communityReplyContent}, SYSDATE())
	</insert>

	<select id="getCommunityAll" resultType="com.onestack.project.domain.Community">
		SELECT
			cr.*, m.*, c.*
		FROM CommunityReply cr
				 JOIN Member m ON cr.member_no = m.member_no
				 JOIN Community c ON cr.community_board_no = c.community_board_no
		WHERE cr.community_board_no = #{communityBoardNo}
		ORDER BY cr.community_reply_reg_date DESC
	</select>

	<!-- 자유게시판 리스트 조회-->
	<select id="communityList" parameterType="map" resultType="Community">
		SELECT *
		FROM Community
		<where>
			<if test="type == 'communityBoardTitle'">
				community_board_title LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="type == 'communityBoardContent'">
				community_board_content LIKE CONCAT('%', #{keyword}, '%')
			</if>
		</where>
		ORDER BY community_board_no DESC
		LIMIT #{startRow}, #{num}
	</select>

	<!-- 페이징네이션을 위핸 전체 게시글 수 -->
	<select id="getCommunityCount">
		SELECT COUNT(community_board_no)
		FROM Community
		<where>
			<if test="type == 'communityBoardTitle'">
				community_board_title LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="type == 'communityBoardContent'">
				community_board_content LIKE CONCAT('%', #{keyword}, '%')
			</if>
		</where>
	</select>

	<!-- 게시글 읽은 횟수 증가 -->
	<update id="incrementReadCount">
		UPDATE Community
		SET community_view = community_view + 1
		WHERE community_board_no = #{communityBoardNo}
	</update>

	<!-- 자유게시판 상세보기 조회-->
	<select id="getCommunity" resultType="Community">
		SELECT *
		FROM Community
		WHERE community_board_no = #{communityBoardNo}
	</select>

	<!-- 자유게시판 작성하기 -->
	<insert id="insertCommunity" parameterType="Community" useGeneratedKeys="true" keyProperty="communityBoardNo">
		INSERT INTO Community(member_no, community_board_title, community_board_content,
							  community_board_reg_date, community_file)
		VALUES(#{memberNo}, #{communityBoardTitle}, #{communityBoardContent},
			   SYSDATE(), #{communityFile})
	</insert>

	<!-- 자유게시판 수정하기 -->
	<update id="updateCommunity" parameterType="Community">
		UPDATE Community
		SET community_board_title = #{communityBoardTitle}, community_board_content = #{communityBoardContent},
			community_board_reg_date = SYSDATE()
		WHERE community_board_no = #{communityBoardNo} AND member_no = #{memberNo}
	</update>

	<!-- 자우게시판 삭제하기 -->
	<delete id="deleteCommunity">
		DELETE FROM Community
		WHERE community_board_no = #{communityBoardNo} AND member_no = #{memberNo}
	</delete>



	<!--

        &lt;!&ndash; 커뮤니티 리스트 조회 &ndash;&gt;
        <select id = "getCommunity" parameterType = "map" resultMap = "MemberWithCommunityResultMap">
            SELECT c.*, m.*
            FROM Community c JOIN Member m
            ON c.member_no = m.member_no
            <where>
                <if test = "type == 'title'">
                    c.community_board_title LIKE CONCAT('%', #{keyword}, '%')
                </if>
                <if test = "type == 'memberNickname'">
                    m.nickname LIKE CONCAT('%', #{keyword}, '%')
                </if>
                <if test = "type == 'content'">
                    c.community_board_content LIKE CONCAT('%', #{keyword}, '%')
                </if>
                <if test = "type == 'date'">
                    c.community_board_reg_date BETWEEN #{date1} AND #{date2}
                </if>
            </where>
            ORDER BY c.community_board_reg_date DESC
            LIMIT #{startRow}, #{num}
        </select>
    -->

	<!-- 커뮤니티 게시글 수 조회 -->
	<select id = "getCommunityBoardCount" parameterType = "map" resultType ="int">
		SELECT COUNT(community_board_no)
		FROM Community c JOIN Member m
		ON c.member_no = m.member_no
		<where>
			<if test = "type == 'title'">
				c.community_board_title LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test = "type == 'memberNickname'">
				m.nickname LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test = "type == 'content'">
				c.community_board_content LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test = "type == 'date'">
				c.community_board_reg_date BETWEEN #{date1} AND #{date2}
			</if>
		</where>
	</select>

	<!-- 이전 커뮤니티글 -->
	<select id = "preCommunity" parameterType = "int" resultType="int">
		SELECT community_board_no
		FROM Community
		WHERE community_board_no &lt; #{currentCommunityBoardNo}
		ORDER BY community_board_no DESC
			LIMIT 1
	</select>

	<!-- 다음 커뮤니티글 -->
	<select id = "nextCommunity" parameterType = "int" resultType="int" >
		SELECT community_board_no
		FROM Community
		WHERE community_board_no &gt; #{currentCommunityBoardNo}
		ORDER BY community_board_no ASC
			LIMIT 1
	</select>

	<!-- 커뮤니티 추가 -->
	<insert id = "addCommunity" parameterType = "Community" useGeneratedKeys = "true" keyProperty = "communityBoardNo">
		INSERT INTO Community(member_no, community_board_title, community_board_content, community_file)
		VALUES (#{memberNo}, #{communityBoardTitle}, #{communityBoardContent}, #{communityFile})
	</insert>

<!--
	 커뮤니티 수정
	<update id = "updateCommunity" parameterType = "Community">
		UPDATE Community
		SET community_board_title = #{communityBoardTitle}, community_board_content = #{communityBoardContent}, community_file = #{communityFile}
		WHERE community_board_no = #{communityBoardNo}
	</update>
-->

	<!-- 커뮤니티 좋아요/싫어요 -->
	<update id = "updateCommunityRecommend" parameterType = "int">
		UPDATE Community
		SET
		<if test = "communityRecommend == 'like'">
			community_board_like = community_board_like + 1
		</if>
		<if test = "communityRecommend == 'dislike'">
			community_board_dislike = community_board_dislike + 1
		</if>
		WHERE community_board_no = #{communityBoardNo}
	</update>

	<!-- 커뮤니티 조회수 증가 -->
	<update id = "incrementCommunityReadCount" parameterType = "int">
		UPDATE Community
		SET community_view = community_view + 1
		WHERE community_board_no = #{communityBoardNo}
	</update>





	<!-- 커뮤니티 댓글 조회 -->
	<select id = "getCommunityReply" resultMap = "MemberWithCommunityReplyResultMap">
		SELECT cr.*, m.*
		FROM CommunityReply cr JOIN Member m
									ON cr.member_no = m.member_no
		WHERE cr.community_board_no = #{communityBoardNo}
		ORDER BY cr.community_reply_reg_date DESC
	</select>

	<!-- 커뮤니티 댓글 추가 -->
	<insert id = "addCommunityReply" parameterType = "CommunityReply" useGeneratedKeys = "true" keyProperty = "communityReplyNo">
		INSERT INTO CommunityReply(community_board_no, member_no, community_reply_content)
		VALUES(#{communityBoardNo}, #{memberNo}, #{communityReplyContent})
	</insert>

	<!-- 커뮤니티 댓글 수정 -->
	<update id = "updateCommunityReply" parameterType = "CommunityReply">
		UPDATE CommunityReply
		SET community_reply_content = #{communityReplyContent}
		WHERE community_reply_no = #{communityReplyNo}
	</update>

	<!-- 커뮤니티 댓글 삭제 -->
	<delete id = "deleteCommunityReply" parameterType = "int">
		DELETE FROM CommunityReply
		WHERE community_reply_no = #{communityReplyNo}
	</delete>

	<!-- 커뮤니티 댓글 좋아요/싫어요 -->
	<update id = "updateCommunityReplyRecommend" parameterType = "int">
		UPDATE Community
		SET
		<if test = "communityReplyRecommend == 'like'">
			community_reply_like = community_reply_like + 1
		</if>
		<if test = "communityReplyRecommend == 'dislike'">
			community_reply_dislike = community_reply_dislike + 1
		</if>
		WHERE community_reply_no = #{communityReplyNo}
	</update>

	<!-- 커뮤니티 게시글 상세 조회 -->
	<select id="getCommunityDetail" parameterType="int" resultType="MemberWithCommunity">
		SELECT c.*, m.*
		FROM Community c
				 JOIN Member m ON c.member_no = m.member_no
		WHERE c.community_board_no = #{communityBoardNo}
	</select>

	<!-- 이전 글 조회 -->
	<select id="getPreviousCommunity" parameterType="int" resultType="Community">
		SELECT *
		FROM Community
		WHERE community_board_no &lt; #{currentCommunityBoardNo}
		ORDER BY community_board_no DESC
			LIMIT 1
	</select>

	<!-- 다음 글 조회 -->
	<select id="getNextCommunity" parameterType="int" resultType="Community">
		SELECT *
		FROM Community
		WHERE community_board_no &gt; #{currentCommunityBoardNo}
		ORDER BY community_board_no ASC
			LIMIT 1
	</select>
</mapper>