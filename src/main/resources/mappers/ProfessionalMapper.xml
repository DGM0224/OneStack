<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.onestack.project.mapper.ProfessionalMapper">
	<resultMap id="MemberResultMap" type="com.onestack.project.domain.Member">
        <id property="memberNo" column="member_no" />
		<result property="name" column="name" />
		<result property="memberId" column="member_id" />
		<result property="kakaoId" column="kakao_id" />
		<result property="pass" column="pass" />
		<result property="nickname" column="nickname" />
		<result property="birth" column="birth" />
		<result property="gender" column="gender" />
		<result property="zipcode" column="zipcode" />
		<result property="address" column="address" />
		<result property="address2" column="address2" />
		<result property="email" column="email" />
		<result property="emailGet" column="email_get" />
		<result property="phone" column="phone" />
		<result property="memberRegDate" column="member_reg_date" />
		<result property="memberType" column="member_type" />
		<result property="memberStatus" column="member_status" />
		<result property="memberImage" column="member_image" />
		<result property="stack" column="stack" />
		<result property="stackName" column="stack_name" />
		<result property="withdrawalEndDate" column="withdrawal_end_date" />
		<result property="banEndDate" column="ban_end_date" />
		<result property="reportedCount" column="reported_count" />
		<result property="isAdmin" column="is_admin" />
		<result property="isSocial" column="is_social" />
		<result property="socialType" column="social_type" />
    </resultMap>

	<resultMap id="ProfessionalResultMap" type="com.onestack.project.domain.Professional">
		<id property="proNo" column="pro_no" />
		<result property="memberNo" column="member_no" />
		<result property="categoryNo" column="category_no" />
		<result property="selfIntroduction" column="self_introduction" />
		<result property="career" column="career" />
		<result property="awardCareer" column="award_career" />
		<result property="studentCount" column="student_count" />
		<result property="rate" column="rate" />
		<result property="professorStatus" column="professor_status" />
		<result property="screeningMsg" column="screening_msg" />
		<result property="proDate" column="pro_date" />
		<result property="contactableTime" column="contactable_time" />
		<result property="averagePrice" column="average_price" />
		<result property="reviewCount" column="review_count" />
	</resultMap>
    
    <resultMap id="QuotationResultMap" type="com.onestack.project.domain.Quotation">
        <id property="quotationNo" column="quotation_no" />
        <result property="matchingNo" column="matching_no" />
        <result property="memberNo" column="member_no" />
        <result property="proNo" column="pro_no" />
        <result property="quotationContent" column="quotation_content" />
        <result property="quotationPrice" column="quotation_price" />
        <result property="quotationRegDate" column="quotation_reg_date" />
    </resultMap>
	
   	<resultMap id="MemberWithProfessionalResultMap" type="com.onestack.project.domain.MemberWithProfessional">
		<association property="member" resultMap="MemberResultMap" />
	    <association property="professional" resultMap="ProfessionalResultMap" />
	</resultMap>

	<resultMap id="MemberWithQutationResultMap" type="com.onestack.project.domain.MemberWithQuotation">
		<association property="member" resultMap="MemberResultMap" />
	    <association property="quotation" resultMap="QuotationResultMap" />
	</resultMap>

	<resultMap id="PortfolioDetailResultMap" type="com.onestack.project.domain.PortfolioDetail">
		<id property="portfolioNo" column="portfolio_no"/>
		<result property="portfolioTitle" column="portfolio_title"/>
		<result property="portfolioContent" column="portfolio_content"/>
		<result property="thumbnailImage" column="thumbnail_image"/>
		<result property="selfIntroduction" column="self_introduction"/>
		<result property="contactableTime" column="contactable_time"/>
		<result property="career" column="career"/>
		<result property="awardCareer" column="award_career"/>
		<result property="categoryName" column="category_name"/>
		<result property="professionalName" column="professional_name"/>
		<result property="portfolioFile1" column="portfolio_file1"/>
		<result property="portfolioFile2" column="portfolio_file2"/>
		<result property="portfolioFile3" column="portfolio_file3"/>
		<result property="portfolioFile4" column="portfolio_file4"/>
		<result property="portfolioFile5" column="portfolio_file5"/>
		<result property="portfolioFile6" column="portfolio_file6"/>
		<result property="portfolioFile7" column="portfolio_file7"/>
		<result property="portfolioFile8" column="portfolio_file8"/>
		<result property="portfolioFile9" column="portfolio_file9"/>
		<result property="portfolioFile10" column="portfolio_file10"/>
	</resultMap>

 <!-- 전문가 신청 -->
<insert id = "addPro" parameterType = "Professional" useGeneratedKeys = "true" keyProperty = "proNo">
		INSERT INTO Professional (member_no, category_no, self_introduction, career, award_career, contactable_time, average_price, review_count)
        VALUES (#{memberNo}, #{categoryNo}, #{selfIntroduction}, #{career}, #{awardCareer}, #{contactableTime}, #{averagePrice}, #{reviewCount})
</insert>

<!-- 회원 타입 업데이트 -->
 <update id="updateMemberType" parameterType="int">
        UPDATE Member SET member_type = #{memberType} WHERE member_no = #{memberNo}
    </update>

<!-- 전문가 정보 조회 -->
<select id = "getPro" parameterType = "int" resultMap = "MemberWithProfessionalResultMap">
	SELECT m.*, p.*
	FROM Member m JOIN Professional p
		ON m.member_no = p.member_no
	WHERE m.member_no = #{memberNo}
</select>

<!-- 전문가 정보 조회2 -->
<select id = "getPro2" parameterType = "int" resultMap = "MemberWithProfessionalResultMap">
	SELECT m.*, p.*
	FROM Member m JOIN Professional p
					   ON m.member_no = p.member_no
	WHERE p.pro_no = #{proNo}
</select>

<!-- 포트폴리오 이미지 조회 -->
<select id="getPortfolioFiles" parameterType="int" resultType="map">
	SELECT portfolio_file1, portfolio_file2, portfolio_file3, portfolio_file4, portfolio_file5,
	portfolio_file6, portfolio_file7, portfolio_file8, portfolio_file9, portfolio_file10
	FROM Portfolio
	WHERE portfolio_no = #{portfolioNo}
</select>


<!-- 전문가 고급 정보 추가 -->
<insert id = "addProAdvancedInfo" parameterType = "ProfessionalAdvancedInformation" useGeneratedKeys = "true" keyProperty = "proAdvancedNo">
	INSERT INTO ProfessionalAdvancedInformation(pro_no, item_no, pro_answer1, pro_answer2, pro_answer3, pro_answer4, pro_answer5)
	VALUES (#{proNo}, #{itemNo}, #{proAnswer1}, #{proAnswer2}, #{proAnswer3}, #{proAnswer4}, #{proAnswer5})
</insert>

<!-- 전문가의 고객 조회 -->
<select id = "getProClient" parameterType = "int" resultMap = "MemberWithQutationResultMap">
	SELECT m.*, q.*
	FROM Member m JOIN Quotation q
		ON m.member_no = q.member_no
	WHERE q.pro_no = #{proNo}
</select>

<!-- 전문가 리뷰 조회 -->
<select id = "getProReview" parameterType = "int" resultType = "Review">
	SELECT *
	FROM Review
	WHERE pro_no = #{proNo}
</select>



<!-- 포트폴리오, 이미지 조회 -->
<select id = "getPortfolio" parameterType = "int" resultType = "Portfolio">
	SELECT *
	FROM Portfolio p
	WHERE p.pro_no = #{proNo}
		AND visibility = 1
</select>

<!-- 포트폴리오 리스트 조회 -->
	<select id="getPortfoliosByMember" parameterType="int" resultType="Portfolio">
		SELECT p.*
		FROM Portfolio p
		JOIN Professional pr ON p.pro_no = pr.pro_no
		WHERE pr.member_no = #{memberNo}
	</select>

	<select id="getPortfolioById" parameterType="int" resultMap="PortfolioDetailResultMap">
		SELECT DISTINCT
			p.portfolio_no, p.pro_no, p.portfolio_title, p.portfolio_content, p.thumbnail_image,
			p.portfolio_file1, p.portfolio_file2, p.portfolio_file3, p.portfolio_file4, p.portfolio_file5,
			p.portfolio_file6, p.portfolio_file7, p.portfolio_file8, p.portfolio_file9, p.portfolio_file10,
			pr.self_introduction, pr.contactable_time, pr.career, pr.award_career,
			c.item_title AS category_name,
			m.name AS professional_name
		FROM Portfolio p
				 LEFT JOIN Professional pr ON p.pro_no = pr.pro_no
				 LEFT JOIN Member m ON pr.member_no = m.member_no
				 LEFT JOIN Category c ON pr.category_no = c.category_no
		WHERE p.portfolio_no = #{portfolioNo}
			LIMIT 1
	</select>


<!-- 포트폴리오 추가 -->
<insert id="addPortfolio" parameterType="Portfolio" useGeneratedKeys="true" keyProperty="portfolioNo">
        INSERT INTO Portfolio(pro_no, pro_advanced_no, portfolio_title, portfolio_content,
                              thumbnail_image, portfolio_file1, portfolio_file2, portfolio_file3,
                              portfolio_file4, portfolio_file5, portfolio_file6, portfolio_file7,
                              portfolio_file8, portfolio_file9, portfolio_file10)
        VALUES (#{proNo}, #{proAdvancedNo}, #{portfolioTitle}, #{portfolioContent},
                #{thumbnailImage}, #{portfolioFile1}, #{portfolioFile2}, #{portfolioFile3},
                #{portfolioFile4}, #{portfolioFile5}, #{portfolioFile6}, #{portfolioFile7},
                #{portfolioFile8}, #{portfolioFile9}, #{portfolioFile10})
</insert>

<!-- 포트폴리오 삭제 -->
<delete id="deletePortfolio">
	DELETE FROM Portfolio WHERE portfolio_no = #{portfolioNo}
</delete>

<!-- 전문가 고급 정보 삭제 -->
<delete id="deleteProfessionalAdvancedInfo">
	DELETE FROM ProfessionalAdvancedInformation WHERE pro_advanced_no = #{proAdvancedNo}
</delete>

<!-- 전문가 삭제 (해당 전문가가 마지막 포트폴리오일 경우만 삭제) -->
<delete id="deleteProfessional">
	DELETE FROM Professional
	WHERE pro_no = #{proNo}
	AND NOT EXISTS (SELECT 1 FROM Portfolio WHERE pro_no = #{proNo})
</delete>

<!-- 포트폴리오 번호로 전문가 번호 및 전문가 고급 정보 번호 조회 -->
<select id="getProfessionalInfoByPortfolio" resultType="ProfessionalInfo">
	SELECT pro_no, pro_advanced_no
	FROM Portfolio
	WHERE portfolio_no = #{portfolioNo}
</select>

<!-- 포트폴리오 공개/비공개 -->
<update id = "updatePortfolioStatus" parameterType ="map">
	UPDATE Portfolio
	SET visibility = #{status}
	WHERE portfolio_no = #{portfolioNo}
</update>

<!-- ✅ 전문가 정보 조회 -->
<select id="getProfessionalByPortfolio" parameterType="int" resultType="Professional">
	SELECT * FROM professional WHERE pro_no = (SELECT pro_no FROM portfolio WHERE portfolio_no = #{portfolioNo})
</select>

<!-- ✅ 전문가 고급 정보 조회 -->
<select id="getAdvancedInfoByPortfolio" parameterType="int" resultType="ProfessionalAdvancedInformation">
	SELECT * FROM ProfessionalAdvancedInformation WHERE pro_no = (SELECT pro_no FROM portfolio WHERE portfolio_no = #{portfolioNo})
</select>

<select id="getItemNoByPortfolio" parameterType="int" resultType="int">
	SELECT item_no
	FROM ProfessionalAdvancedInformation
	WHERE pro_no = (SELECT pro_no FROM portfolio WHERE portfolio_no = #{portfolioNo})
</select>

	<select id="getPortfolioEntityById" resultType="Portfolio" parameterType="int">
		SELECT
		portfolio_no AS portfolioNo,
		pro_no AS proNo,
		pro_advanced_no AS proAdvancedNo,
		portfolio_title AS portfolioTitle,
		portfolio_content AS portfolioContent,
		thumbnail_image AS thumbnailImage,
		portfolio_file1, portfolio_file2, portfolio_file3,
		portfolio_file4, portfolio_file5, portfolio_file6,
		portfolio_file7, portfolio_file8, portfolio_file9, portfolio_file10
		FROM Portfolio
		WHERE portfolio_no = #{portfolioNo}
	</select>

	<!-- ✅ 포트폴리오 업데이트 -->
	<update id="updatePortfolio" parameterType="Portfolio">
		UPDATE Portfolio
		SET portfolio_title = #{portfolioTitle},
		portfolio_content = #{portfolioContent},
		thumbnail_image = #{thumbnailImage},
		portfolio_file1 = #{portfolioFile1},
		portfolio_file2 = #{portfolioFile2},
		portfolio_file3 = #{portfolioFile3},
		portfolio_file4 = #{portfolioFile4},
		portfolio_file5 = #{portfolioFile5},
		portfolio_file6 = #{portfolioFile6},
		portfolio_file7 = #{portfolioFile7},
		portfolio_file8 = #{portfolioFile8},
		portfolio_file9 = #{portfolioFile9},
		portfolio_file10 = #{portfolioFile10}
		WHERE portfolio_no = #{portfolioNo}
	</update>

	<!-- ✅ 전문가 정보 업데이트 -->
	<update id="updateProfessional" parameterType="Professional">
		UPDATE Professional
		SET category_no = #{categoryNo},
		self_introduction = #{selfIntroduction},
		career = #{career},
		award_career = #{awardCareer},
		contactable_time = #{contactableTime}
		WHERE pro_no = #{proNo}
	</update>

	<!-- ✅ 전문가 고급 정보 업데이트 -->
	<update id="updateProfessionalAdvancedInfo" parameterType="ProfessionalAdvancedInformation">
		UPDATE ProfessionalAdvancedInformation
		SET item_no = #{itemNo},
		pro_answer1 = #{proAnswer1},
		pro_answer2 = #{proAnswer2},
		pro_answer3 = #{proAnswer3},
		pro_answer4 = #{proAnswer4},
		pro_answer5 = #{proAnswer5}
		WHERE pro_advanced_no = #{proAdvancedNo}
	</update>

</mapper>